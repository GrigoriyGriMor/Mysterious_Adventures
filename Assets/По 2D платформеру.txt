1. гейм контроллер	
должен управлять состоянием уровня, а так же общими характеристиками игрока (такими как количество очков). 

2. сейв контроллер
Должен сохранять номер уровня.
Позиция игрока на уровне.
Состояния уровня (ловушки, двери и прочее)
Количество очков (если будут)
Предметы в инвентаре.

При старте(загрузке) уровня геймконтроллер будет делать запросы в сейвконтроллер, и получать необходимые данные по уровню и его состоянию.
Соответственно сейв контроллер должен считывать данные раньше, чем гк запросит их, а так же быть статичным публичным классом, и иметь соответствующие функции передачи, причем важно, что функции должны быть раздельные на каждый тип данных. (т.к. часть из них могут запрашивать и другие классы) 

3. Управление персонажем основывается на кликах по локации. Все передвижения персонаж производит только после клика игроком в точку на уровне. 
Например что бы пройти вперед игроку нужно кликнуть в левую часть экрана и персонаж доходит по оси Х до этой позиции. 
Если у персонажа на пути возникает препядствие, то он останавливается.
Если игрок кликнет на само препядствие, то он сможет с ним взаимодействовать (наприме: забраться на лестницу/выступ или наоборот спуститься по лестнице)
Что бы подобрать предмет, игроку достаточно кликнуть на него, после чего персонаж пойдет в сторону предмета(если на его пути нет препядствий), и когда приблизится достаточно близко подберет его. 
Если игрок не может взаимодействовать с препядствием, то мы ему это сообщаем всплывающим текстом или голосом персонажа. (Например персонаж говорит: "Кажется тут слишком высоко")

Подобранные предметы уходят в инвентарь, после чего их можно использовав применив драг энд дроп на предмет с которым потенциально, итем мог бы взаимодействовать. Если игрок ошибся, мы опять же ему об этом сообщаем.

ВАЖДНО! Всегда должен быть отклик на любое действие игрока (анимация, звук, текст и т.д.). 

Нужно написать класс, который при соприкосновении с колайдером игрока передаем ему данные ответа. (что персонаж должен сказать и т.п.)

4. Инвентарь и его применение: 
	а. В инвентарь мы можем положить вещи, которые игрок нашел во время своего путешествия. 
	В идеале, если у игрока будет несколько вариантов прохождения некоторых ловушек, а предметы что он смог найти и не забыл подобрать, дадут доступ к использованию этих дополнительных вариантов прохождения.
	Подбираются предметы путем нажатия на них на сцене, после чего они исчезают со сцены и переносятся в инвентарь. 
	Использовать предмет можно, нажав на него в инвентаре и с помощью Drag and Drop перетаскивая на нужное место на сцене. Если предмет подходит, то устанавливаем его на сцене в нужное место, а из инвенторя убераем.
	Если же предмет не подходим, то сообщаем игроку об этом путем текстового и звукового сообщения, после чего он возвращается обратно в инвентарь.
	Когда инвентарь открывается, можно замедлять время и ставить визуальную заставку на экран, что бы игрок понимал что происходит.

5. Система разделения сохранений: когда игрок нажимает NewGame мы спрашиваем как зовут нашего игрока, он вводит имя и мы добавляем в SaveData набор данных с этим именем. 
Если игрок повторно нажимает NewGame мы повторно спрашиваем у него кто играет, и после этого  добавляем новый набор данных в SaveData.
Когда игрок нажимает продолжить, мы спрашиваем у него кто играет, и он выбирает из доступных вариантов.

6. ПЛАН РАЗРАБОТКИ УРОВНЕЙ:
	а. Создание схемы уровня (относительно грубый вариант с обозначением основных моментов в локации);
	б. Проработка / полировка схемы уровня, добавление технических неровностей, более детально нарисованных объектов и их формы;
	г. Создание грейбокс сцены по ранее отрисованной схеме / Проверка интереса геймплея. 
		- Если все хорошо: Переходим к пункту (д).
		- Если результат не устраивает: Переходим к пункту (а).
	д. Создание скетча уровня (Первичный скетч с наведением красоты (наклоны / обрывы / деревья / камни и другое, то есть более детальная проработка ландшавта уже художником, и прорисовка скетча уровня))
	е. Преобразование грейбокс сцены по нарисованному скетчу и проверка интереса и проходимости. 
		- Если все хорошо: переходим к пункту (ж).
		- Если результат не устраивает переходим к пункту (д).
	ж. Создание арта по созданой сцене/уровню и скетчу.
		- Если все хорошо: переходим к сл. пункту.
		- Если результат не устраивает, дорабатываем концепт арт.
	з. Создание атласов текстур по готовому концепт арту уровня.
	и. Импорт атласов в уровень, создание красивого уровня на их основе, настройка света/тени и полировка уровня.

	ПРАВИЛА РАЗРАБОТКИ СХЕМЫ УРОВНЯ (Пункты "а", "б"):
		1. **ЭТАП 1 Первичная схема уровней** Рисуем уровень по секторам (Сектор - это кусок локации с определенной стилистикой (например: джунгли, которые переходят в джунгли рядом с входом в пирамиду))
		2. Первая схема рисуется условно с обозначением ключевых точек, интерактивных объектов и других важных для геймплея моментов.
		3. Описания, которые должны быть на схеме:
			- Общяя графическая состовляющая и атмосфера. (Например: зеленые джунгли рядом с пирамидой майя днем, лучи солнца просвечивают сквозь кроны деревьев).
			- Размер экрана в пикселях(в нашем случае 1920x1080) и шаблон(прямоугольник, размер можно меньше, главное что бы соотношения совпадали). 
				Этот прямоугольник будет обозначать зону видимости игрока. (Должен прилагаться к каждой схеме.)
			- Обозначение размеров персонажа. Должен прилагаться к каждой схеме.
			- Обозначение общего размера подготовленного сектора. (в идеале если будет мерится экранами. Например: уровень размерностью 3х2, где 3=ширина, а 2=высота)
			- Обозначение интерактивных объектов, далее **ИО**. (ловушки, загадки, предметы которые можно поднять).
			- Обозначение неинтерактивных точек интереса, далее **НТИ** (НТИ - это объекты на сцене, с которыми игрок напрямую не взаимодействуют, но он может прочитать/расмотреть и другое.
			(Например: подсказки текстовые, графические(рисунок на стене), нарративный объект, сюжетный объект(например свиток))
			- Описание ИО. (это краткое описание что это за объект и как он активируется (Например: Дверь, активируется рычагом №1))
				Можно дополнительно рисовать схему/принцип работы ИО. 
				(Желательно(если работа ведется в фотошопе/коралдроу) делить общую схему, описания и другие элементы связанные по определенному типу на слои. Что бы их можно было включить/выключить)
			- Описания НТИ (что это такое).
			- Обозначение позиций важных графически элементов, которые влияют на геймплей (грубо говоря, у нас есть точка интереса, где мы решили, что на нее падает луч солнца, 
				что бы направить игрока. Это важный элемент связанный с геймплеем и мы его обозначаем и кратко описываем)
			- Дополнительные описания/обозначение по необходимости.
		5. На данном этапе мы подробно продумываем все интерактивные объекты, и объекты связанные с ними. Это основная задача данного этапа (Например: я достал железную балку из под камня, после чего камень падает)
			(В обязательные задачи левелдизайнера в этом проекте входит разработка ловушек/загадок на основе разработанных механик).
			- Загадки на секторе в идеале должны иметь несколько вариантов прохождения. (В идеале не меньше двух). 
				(Например: один вариант трудный/основной, а второй доступен например, если ранее на предыдущем секторе игрок подобрал какой-то предмет, который может дать возможность использовать другой вариант прохождения загадки.
			- Ловушки так же можно использовать для разработки загадок. 
			- Предметы которые могут дать дополнительные варианты прохождения, не должны находится на очевидных местах. (Например: железная балка подпираей камень, или веревка висит на крючке перед входом, но ничем не подсвечена) 
			- Подсказки
			- Направляющие
		4. Рисуем по три сектора на первичной схеме, после чего зовем ГД и обсуждаем. Вносим правки, обсуждаем новые механики(если такие необходимы).
		5. ** ЭТАП 2 Проработанная схема уровней ** Если первичная схема утверждена, переводим ее на вторичную/проработанную схему.
		6. Вторая схема включает в себя более детальную проработку ландшавта в соответствии с точными размерами секторов. 
		7. Цель данного этапа, визуальная проверка проходимости уровня. (То есть по готовности проработанной схемы, на ней визуально пробегаем весь уровень и смотрим есть ли на нем серьезные ошибки/недоработки)
		8. ** ЭТАП 3 Разработка Грейбокс сцены ** На этом этапе левелдизайнер собирает все разработанные сектора в рабочий уровень в Unity3d. 
			- Устанавливает и настраевает все интерактивные объекты.
			- Устанавливает и настраевает все подсказки.
			- Устанавливает все необходимые важные графические элементы (которые обозначают неинтерактивные объекты - направляющие (То есть графические элементы от которых частично зависит понимание игроком уровня))
		9. Основная цель данного этапа - поиграть собранный уровень без графической состовляющей и определить:
			- Основные недоработки левелдизайна
			- Технические ошибки механик
			- Реальную проходимость уровня
			- Интерес при прохождении уровня
		10. Если все хорошо, то отправляем сектора на скетчинг в арт отдел. Если выявили серьезные недоработки, то возвращаемся к 1 этапу и дорабатываем схему.

СРОКИ РАЗРАБОТКИ КАЖДОГО ЭТАПА:
	1. Этап 1 (три сектора) - 2-3 дня.
	2. Этап 2 - 1 день.
	3. Этап 3 - 2 дня (максимум 3).
	4. Этап 4 (Когда все текстурные атласы готовы, начинается сборка финального(рабочего) варианта уровня, который будет включен в билд) - 4-5 дней. 



Техническое задание (программирование):

	1. Использую предыдущие наработки создать для персонажа возможность подниматься по лестнице.
		- Игрок должен переходить в режим вертикального движения подъема/спуска по нажатию на объект "лестница". 
			а. Логика работы следующая: Игрок кликает по лестнице, персонаж сначала подбегает к ней, после чего переключается в режим подъема по лестнице, далее персонаж может двигаться только по вертикали до того момента пока не зайдет на край лестницы. 
			б. Логика выхода из режима подъема по лестницы (вертикального движения): Если игрок кликнул в позицию на экране, которая по Y выше/ниже верхней/нижней грани лестницы, то персонаж:
				- Если спустился к нижнему краю лестницы, то просто меняется режим после чего персонаж автоматически приземляется на земллю.
				- Если поднялся к верхнему краю лестницы, то тоже просто меняется режим и персонаж приземляется на пол. (ВАЖНЫЙ МОМЕНТ: верхний край лестницы выступает над полом примерно на высоту роста персонажа, так что бы персонаж соскакивая с верхнего края лестницы не падал под колайдер пола, а находился над ним)
	2. Создать счетчик внутреигровой валюты, который отображает набранную игроком валюту за все время игры. 
		- Отображаться должно в главном меню (верхний правый угол экрана например).
		- В игре так же в верхнем правом углу. 
		- Запись количества внутреигровой валюты должна производится в SaveContoller-е(ВАЖНО, что их количество не обнуляется по завершению уровня). (Можно создать публичную функцию в saveController-е, которая будет записывать в префсы новое значение)
		- Данные по набранному количеству должна верно отображаться как в главном меню, так и в игре на всем ее протяжении.
	3. Создать механику (можно использовать предыдущие наработки, или нет, но стараемся придерживаться имеющейся архитектуры): 
		- На уровне располагаются специальные объекты (условно алмазы), которые игрок может подобрать пока проходит уровень. (алмазы будут прятаться как доп объекты на уровне, и будут иметь смысл своеобразного бонуса для игрока.)
		- При подборе объекта играется специальный звук + партикл на месте объекта. (Запрещено использовать Instantiate, что бы создать партикл во время выполнения сценария. Партикл должен быть уже в префабе подбираемого объекта и играться корректно)
		- Далее варианта реализации два (на выбор):
			а. Алмаз улетает в имеющийся инвентарь, как любой другой подбирающийся объект. (в этом случае тебе не придется писать логику подбора предмета. Только дописать активацию звуков+партиклов при поднятии)
			б. Алмаз улетает в специальный счетчик (то есть в этом случае у нас будет отображатся два счетчика(внутреигровая валюта справа и алмазы слева экрана)), после чего количество счетчика увеличивается на +1.
		- В конце уровня (уровня, а не сектора) распологается специальный объект (условно статуя), в которую эти алмазы должны быть помещены. После того как игрок помещает алмазы в статую, они конвертируются в внутреигровую валюту. 
			Возможны два варианта реализации:
				а. Если объекты поднимались и складывались в инвентарь, то игрок должен сам их вытаскивать и вставлять в свободные ячейки на статуе.		
				б. Если объекты улетали в UI-счетчик алмазов, то когда игрок нажмет на статую, они автоматически все разлетятся по пустым позициям на статуе. (визуал: игрок жмет на статую, после чего количество в UI-счетчике начинает уменьшаться, а из позиции персонажа с увеличением до нужных размеров вылетают алмазы и устанавливаются в пустые позиции на статуе)
		- После того как каждый алмаз встал в нужную позицию, игрок получает определенное количество внутреигровой валюты. (выводим переменную в инспектор, что бы левелдизайнер мог сам настроить это количество).
	4. Реализовать механику покупки итемов (учитывая систему активации итемов написанную ранее).
		- В начале каждого уровня находится своеобразная торговая лавка. Когда игрок кликает на нее, он сначала подходит к ней, а потом открывается меню магазина.
		- В меню магазина распологаются итемы (Итемы устанавливаются в данное меню по ID предметов(итемов), которые указал левелдизайнер для этого объекта(то есть выводим массив в инспектор))
		- Так же левелдизайнер должен иметь возможность настроить цену для каждого итема отдельно. (имеется ввиду что создается не просто массив ID, а массив класса, который включает в себя ID + price)
		- После того как игрок кликнул на какой-либо объект должно появлятся окошко (купить? да/нет)
			а. Если он нажимает нет, то окошко просто закрывается.
			б. Если он нажимает да, то из его счетчика общей валюты улетает (не разом, а постепенно) количество необходимых для покупки итема валюты. А итем из ячейки магазина  улетает в инвентарь. (можно использовать подобную реализованной системы подъема предмета)
		- Так же в меню магазина должна быть кнопка "закрыть магазин", которая закрывает меню магазина. 
		- ВАЖНО: Меню магазина должно появляться по аналогичной EngraleCotroller системе.
		- Так же важно учитывать логику того, что если игрок купил предмет, а потом решил перезагрузить уровень, то количество его денег должно вернуться к тому количеству, которое было именно на старте уровня. (не к 0, а именно к количеству, которое было на старте конкретного уровня)
